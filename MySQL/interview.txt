------Creating & Understanding Database---------
Charset:- A character set is a set of symbols and encodings.One character set can have multiple collation.
Collation:- Collation tells the database how to perform string matching and sorting.
eg:- A=0,B=1,a=2,b=3
here,A is the symbols
0 is the encoding for A.
The cobination of all four letters & their encodings is a character set.

:- to check the list of character set , we have SHOW CHARACTER SET command.
:- to check the Collation:- SHOW COLLATION, SHOW COLLATION WHERE CHARSET = "utf8mb4"

For creating a database using SQLYOG:-
right click on root@localhost->create database

***************************
:-to show the database using command line:- show databases;
mysql> create database employee;
ERROR 1007 (HY000): Can't create database 'employee'; database exists  //it gives error bcoz employee database pahle se hi hai

is error ko htane ke liye:-
mysql> create database if not exists employee;
Query OK, 1 row affected, 1 warning (0.00 sec)

it is giving warning,for check warning:-
mysql> show warnings;
+-------+------+---------------------------------------------------+
| Level | Code | Message                                           |
+-------+------+---------------------------------------------------+
| Note  | 1007 | Can't create database 'employee'; database exists |
+-------+------+---------------------------------------------------+
1 row in set (0.00 sec)

***************************

mysql> create database if not exists emp;
Query OK, 1 row affected (0.01 sec)

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| emp                |
| employee           |
| information_schema |
| mysql              |
| performance_schema |
| sakila             |
| sys                |
| world              |
+--------------------+
8 rows in set (0.00 sec)

--------------------------------------DROP Database------------------------------------------------------
:- a Drop Database statement is used to delete the existing database from the server.
:- So, Basically the DROP DATABASE statement first drops all the tables and then deletes the database permanently  and can't be undone.

mysql> drop database emp;
Query OK, 0 rows affected (0.09 sec)


------------------------------------Datatypes----------------------------------
:- to store any information in a table, we need fields and every single pieces of information that is stored in the fields need to have a "data types".
mysql uses many different data types which are generally broken into 3 main categories:-
1.Numeric:- It actually deals with NUMBERS.
2.Date and Time:- It deals with date or time
3.string types:- It can contain anything like:- a number,a string,a statement,a symbol,etc.

--------Numeric Data types--------
:-INTEGER,INT,SMALLINT,TINYINT,BIGINT
signed:-an integer that can have negative values.eg:- -2147483648 to 2147483648
unsigned:- will have positive values with higher range. eg:- 0 to 4294967295

eg:- INSERT INTO datatypes_example(sid,usid) VALUES(-10,10);

---------Date nad Time-------------
1.Date:- It stores only the date part of the datetime,we pass the values in yyyy-mm-dd.
2.Date Time:- It stores both date and time format,we pass the values like this:- YYYY-MM-DD hh:mm:ss
3.Timestamp:- Timestamp also stores the same value as datetime but has a minimum date of 1970-01-01 00:00:01 & maximum date of 2038-01-19 03:14:07.

---------String Data types----------
:- CHAR and VARCHAR types are declared with a length that indicates the maximum number of characters we want to store.
eg:- CHAR(30) can hold up to 30 characters.

------------------------------------------MANAGING TABLES---------------------------------------

--------Database storage engines-------
:- A database storage engine is a MySQL component that internally manages the SQL operations peformed on different table types.
INNODB is the default and mostly used storage engine.

-------Creating and Understanding Tables-------------
craete database:- CREATE DATABASE sample_db;

set the working database:- USE sample_db;

//create table
Create table <tablename> (columnname column datatype and column definition)
eg:-
CREATE TABLE productcategory
(
      id INT AUTO_INCREMENT,
      categoryname CHAR(20) NOT NULL,
      categorytitle VARCHAR(30) NOT NULL,
      descriptio VARCHAR(150),
      createdAt TIMESTAMP DEFAULT NOW(),
      PRIMARY KEY (id)
)

:- SHOW TABLES; //it will show the tables

mysql> show tables;
+---------------------+
| Tables_in_sample_db |
+---------------------+
| productcategory     |
+---------------------+
1 row in set (0.00 sec)

:- DESC productcategory;   //this will show the details of the table.

mysql> DESC productcategory;
+---------------+--------------+------+-----+-------------------+-------------------+
| Field         | Type         | Null | Key | Default           | Extra             |
+---------------+--------------+------+-----+-------------------+-------------------+
| id            | int          | NO   | PRI | NULL              | auto_increment    |
| categoryname  | char(20)     | NO   |     | NULL              |                   |
| categorytitle | varchar(30)  | NO   |     | NULL              |                   |
| descriptio    | varchar(150) | YES  |     | NULL              |                   |
| createdAt     | timestamp    | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED |
+---------------+--------------+------+-----+-------------------+-------------------+
5 rows in set (0.00 sec)

:- To insert the records in table:- INSERT INTO TABLENAME VALUES();
INSERT INTO productcategory
VALUES(1,"Mobiles",'Gadgets','Some desription',NOW());

mysql> select * from productcategory;
+----+--------------+---------------+-----------------+---------------------+
| id | categoryname | categorytitle | descriptio      | createdAt           |
+----+--------------+---------------+-----------------+---------------------+
|  1 | Mobiles      | Gadgets       | Some desription | 2022-08-22 03:27:08 |
+----+--------------+---------------+-----------------+---------------------+
1 row in set (0.00 sec)

INSERT INTO productcategory
(categoryname,categorytitle,descriptio,createdAt)
VALUES("Laptops",'Gadgets','Some desription2',NOW());

mysql> select * from productcategory;    //id INT AUTO_INCREMENT, bcoz of auto increment 2 will add automatically here
+----+--------------+---------------+------------------+---------------------+
| id | categoryname | categorytitle | descriptio       | createdAt           |
+----+--------------+---------------+------------------+---------------------+
|  1 | Mobiles      | Gadgets       | Some desription  | 2022-08-22 03:27:08 |
|  2 | Laptops      | Gadgets       | Some desription2 | 2022-08-22 03:33:22 |
+----+--------------+---------------+------------------+---------------------+
2 rows in set (0.00 sec)

Ques:- what is the use of AUTO_INCREMENT?
:- MySQL will insert the value automatically in that column in a sequential manner even if the column is not specified in the insert statement.

Ques:- what is NULL and NOT NULL?
:- NULL means NULL values are allowed in that field.
:- NOT NULL means you can't skip that field ,values need to be entered in that field.

Ques:- What is the purpose of DEFAULT column?
:- DEFAULT value of a column is a value used in that case when there is no value specified by user.


----------------Introduction to FOREIGN key-------------
:- FOREIGN key is used to establish the relationship b/w tables.

Ques:- what is referential Integrity?
:- It is the logical dependency of foreign keys on primary keys.

Ques:- what is CASCADE option?
:- CASCADE is when a primary key record is deleted, it will delete the child records.


-----------------Creating tables with foreign keys-----------
syntax:-
CONSTRAINT constraint_name
FOREIGN KEY foreign_key_name 
REFERENCES parent_table


code:-
mysql> CREATE TABLE products(
    -> productid INT NOT NULL AUTO_INCREMENT,
    -> productname VARCHAR(30) NOT NULL,
    -> categoryid INT,
    -> createdAt TIMESTAMP DEFAULT NOW(),
    -> PRIMARY KEY (productid),
    -> CONSTRAINT fk_categoryid             //here, creating foreign key
    -> FOREIGN KEY (categoryid)
    -> REFERENCES productcategory (id)
    -> );
Query OK, 0 rows affected (0.07 sec)


-------------------------------------------
mysql> INSERT INTO products (productname,categoryid)
    -> VALUES ('Samsung',10);
ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`sample_db`.`products`, CONSTRAINT `fk_categoryid` FOREIGN KEY (`categoryid`) REFERENCES `productcategory` (`id`))

-----------------------------------------------
mysql> INSERT INTO products (productname,categoryid)
    -> VALUES ('Samsung',1);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO products (productname,categoryid)
    -> VALUES ('Apple',1);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO products (productname,categoryid)
    -> VALUES ('Nokia',1);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO products (productname,categoryid)
    -> VALUES ('MACBOOK',2);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO products (productname,categoryid)
    -> VALUES ('Motorola',2);
Query OK, 1 row affected (0.00 sec)

----------------------------------------------------
mysql> SELECT * FROM productcategory;
+----+--------------+---------------+------------------+---------------------+
| id | categoryname | categorytitle | descriptio       | createdAt           |
+----+--------------+---------------+------------------+---------------------+
|  1 | Mobiles      | Gadgets       | Some desription  | 2022-08-22 03:27:08 |
|  2 | Laptops      | Gadgets       | Some desription2 | 2022-08-22 03:33:22 |
+----+--------------+---------------+------------------+---------------------+
2 rows in set (0.00 sec)

mysql> SELECT * FROM products;
+-----------+-------------+------------+---------------------+
| productid | productname | categoryid | createdAt           |
+-----------+-------------+------------+---------------------+
|         3 | Samsung     |          1 | 2022-08-23 00:29:06 |
|         4 | Apple       |          1 | 2022-08-23 00:29:06 |
|         5 | Nokia       |          1 | 2022-08-23 00:29:06 |
|         6 | MACBOOK     |          2 | 2022-08-23 00:29:06 |
|         7 | Motorola    |          2 | 2022-08-23 00:29:19 |
|         8 | Samsung     |          1 | 2022-08-23 00:29:57 |
|         9 | Apple       |          1 | 2022-08-23 00:29:57 |
|        10 | Nokia       |          1 | 2022-08-23 00:29:57 |
|        11 | MACBOOK     |          2 | 2022-08-23 00:29:57 |
|        12 | Motorola    |          2 | 2022-08-23 00:29:57 |
+-----------+-------------+------------+---------------------+
10 rows in set (0.00 sec)




------------------------------------------
mysql> DELETE FROM productcategory WHERE id=1;
ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`sample_db`.`products`, CONSTRAINT `fk_categoryid` FOREIGN KEY (`categoryid`) REFERENCES `productcategory` (`id`))

it is giving error bcoz the id that we tried to delete is having the reference in the product table.

----------------
mysql> UPDATE productcategory SET id=10 WHERE id=1;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> ALTER TABLE products DROP FOREIGN KEY fk_categoryid;
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql>
mysql> ALTER TABLE products ADD
    ->       CONSTRAINT fk_categoryid
    ->       FOREIGN KEY (categoryid)
    ->       REFERENCES productcategory (id)
    ->                ON UPDATE SET NULL
    ->                ON DELETE SET NULL;
Query OK, 10 rows affected (0.06 sec)
Records: 10  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM productcategory;
+----+--------------+---------------+------------------+---------------------+
| id | categoryname | categorytitle | descriptio       | createdAt           |
+----+--------------+---------------+------------------+---------------------+
|  2 | Laptops      | Gadgets       | Some desription2 | 2022-08-22 03:33:22 |
| 10 | Mobiles      | Gadgets       | Some desription  | 2022-08-22 03:27:08 |
+----+--------------+---------------+------------------+---------------------+
2 rows in set (0.00 sec)

mysql> SELECT * FROM products;
+-----------+-------------+------------+---------------------+
| productid | productname | categoryid | createdAt           |
+-----------+-------------+------------+---------------------+
|         3 | Samsung     |       NULL | 2022-08-23 00:29:06 |
|         4 | Apple       |       NULL | 2022-08-23 00:29:06 |
|         5 | Nokia       |       NULL | 2022-08-23 00:29:06 |
|         6 | MACBOOK     |          2 | 2022-08-23 00:29:06 |
|         7 | Motorola    |          2 | 2022-08-23 00:29:19 |
|         8 | Samsung     |       NULL | 2022-08-23 00:29:57 |
|         9 | Apple       |       NULL | 2022-08-23 00:29:57 |
|        10 | Nokia       |       NULL | 2022-08-23 00:29:57 |
|        11 | MACBOOK     |          2 | 2022-08-23 00:29:57 |
|        12 | Motorola    |          2 | 2022-08-23 00:29:57 |
+-----------+-------------+------------+---------------------+
10 rows in set (0.00 sec)


:- The purpose of ALTER statement is to change the structure of the table
----------------

-------------------------------ALTER Table command--------------------------
What modifications can we do with ALTER TABLE command?
:- Add Columns to table 
:- Change  the Datatype of an existing column
:- Rename Columns
:- Change column position
:- Delete column
:- Rename TABLE
we have different commands to fullfill all these modifications , which we need to use with the "ALTER TABLE" command.

:- The first one is ADD keyword ,which is used to add one or more columns to the table.
Syntax:- ALTER TABLE <table_name>
         ADD
         <new_column_name><column_definition>
         [FIRST | AFTER column_name];


check existing definition of products table:-
mysql> DESC products;
+-------------+-------------+------+-----+-------------------+-------------------+
| Field       | Type        | Null | Key | Default           | Extra             |
+-------------+-------------+------+-----+-------------------+-------------------+
| productid   | int         | NO   | PRI | NULL              | auto_increment    |
| productname | varchar(30) | NO   |     | NULL              |                   |
| categoryid  | int         | YES  | MUL | NULL              |                   |
| createdAt   | timestamp   | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED |
+-------------+-------------+------+-----+-------------------+-------------------+
4 rows in set (0.00 sec)

--------------------------------
Add one column to this table:-

mysql> ALTER TABLE products
    -> ADD productimage BLOB;
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql>
mysql> DESC products;
+--------------+-------------+------+-----+-------------------+-------------------+
| Field        | Type        | Null | Key | Default           | Extra             |
+--------------+-------------+------+-----+-------------------+-------------------+
| productid    | int         | NO   | PRI | NULL              | auto_increment    |
| productname  | varchar(30) | NO   |     | NULL              |                   |
| categoryid   | int         | YES  | MUL | NULL              |                   |
| createdAt    | timestamp   | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED |
| productimage | blob        | YES  |     | NULL              |                   |
+--------------+-------------+------+-----+-------------------+-------------------+
5 rows in set (0.00 sec)

Note:- we have not provided the order for the column, so by default it will add it as the last column on the table.

mysql> ALTER TABLE products
    -> ADD price DECIMAL(7.2) FIRST,
    -> ADD sellingprice DECIMAL(8,2) AFTER categoryid;
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql>
mysql> DESC products;
+--------------+--------------+------+-----+-------------------+-------------------+
| Field        | Type         | Null | Key | Default           | Extra             |
+--------------+--------------+------+-----+-------------------+-------------------+
| price        | decimal(7,0) | YES  |     | NULL              |                   |
| productid    | int          | NO   | PRI | NULL              | auto_increment    |
| productname  | varchar(30)  | NO   |     | NULL              |                   |
| categoryid   | int          | YES  | MUL | NULL              |                   |
| sellingprice | decimal(8,2) | YES  |     | NULL              |                   |
| createdAt    | timestamp    | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED |
| productimage | blob         | YES  |     | NULL              |                   |
+--------------+--------------+------+-----+-------------------+-------------------+
7 rows in set (0.00 sec)

----------------------------
Next option that we have is MODIFY,which is used to change the column definition i.e, datatype of the column

Syntax:- ALTER TABLE <table_name>
         MODIFY
         <new_column_name><column_definition>
         [FIRST | AFTER column_name];

---------
mysql> ALTER TABLE products
    -> MODIFY price DECIMAL(25,5) AFTER sellingprice;
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql>
mysql> DESC products;
+--------------+---------------+------+-----+-------------------+-------------------+
| Field        | Type          | Null | Key | Default           | Extra             |
+--------------+---------------+------+-----+-------------------+-------------------+
| productid    | int           | NO   | PRI | NULL              | auto_increment    |
| productname  | varchar(30)   | NO   |     | NULL              |                   |
| categoryid   | int           | YES  | MUL | NULL              |                   |
| sellingprice | decimal(8,2)  | YES  |     | NULL              |                   |
| price        | decimal(25,5) | YES  |     | NULL              |                   |
| createdAt    | timestamp     | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED |
| productimage | blob          | YES  |     | NULL              |                   |
+--------------+---------------+------+-----+-------------------+-------------------+
7 rows in set (0.00 sec)

--------------------
Next option is CHANGE , which does all the functions that modify does & on top of that it can also rename the column
syntax:-
ALTER TABLE <table_name>
CHANGE <original_name> <new_name> <column_definition>

-----------
mysql> DESC products;
+--------------+---------------+------+-----+-------------------+-------------------+
| Field        | Type          | Null | Key | Default           | Extra             |
+--------------+---------------+------+-----+-------------------+-------------------+
| productid    | int           | NO   | PRI | NULL              | auto_increment    |
| productname  | varchar(30)   | NO   |     | NULL              |                   |
| categoryid   | int           | YES  | MUL | NULL              |                   |
| productprice | decimal(25,5) | YES  |     | NULL              |                   |
| sellingprice | decimal(8,2)  | YES  |     | NULL              |                   |
| createdAt    | timestamp     | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED |
| productimage | blob          | YES  |     | NULL              |                   |
+--------------+---------------+------+-----+-------------------+-------------------+
7 rows in set (0.00 sec)

------------
Next option is DROP , which is used to delete the column from the table & also the easiest among all.

mysql> ALTER TABLE products
    -> DROP productimage;
Query OK, 0 rows affected (0.04 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> DESC products;
+--------------+---------------+------+-----+-------------------+-------------------+
| Field        | Type          | Null | Key | Default           | Extra             |
+--------------+---------------+------+-----+-------------------+-------------------+
| productid    | int           | NO   | PRI | NULL              | auto_increment    |
| productname  | varchar(30)   | NO   |     | NULL              |                   |
| categoryid   | int           | YES  | MUL | NULL              |                   |
| productprice | decimal(25,5) | YES  |     | NULL              |                   |
| sellingprice | decimal(8,2)  | YES  |     | NULL              |                   |
| createdAt    | timestamp     | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED |
+--------------+---------------+------+-----+-------------------+-------------------+
6 rows in set (0.00 sec)

----------------------
We can also rename the table name by using RENAME keyword.

mysql> ALTER TABLE products
    -> RENAME products_table;
Query OK, 0 rows affected (0.03 sec)

mysql> DESC products_table;
+--------------+---------------+------+-----+-------------------+-------------------+
| Field        | Type          | Null | Key | Default           | Extra             |
+--------------+---------------+------+-----+-------------------+-------------------+
| productid    | int           | NO   | PRI | NULL              | auto_increment    |
| productname  | varchar(30)   | NO   |     | NULL              |                   |
| categoryid   | int           | YES  | MUL | NULL              |                   |
| productprice | decimal(25,5) | YES  |     | NULL              |                   |
| sellingprice | decimal(8,2)  | YES  |     | NULL              |                   |
| createdAt    | timestamp     | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED |
+--------------+---------------+------+-----+-------------------+-------------------+
6 rows in set (0.00 sec)

now,change the table name back to that it was before.
mysql> ALTER TABLE products_table
    -> RENAME products;
Query OK, 0 rows affected (0.04 sec)

mysql> DESC products;
+--------------+---------------+------+-----+-------------------+-------------------+
| Field        | Type          | Null | Key | Default           | Extra             |
+--------------+---------------+------+-----+-------------------+-------------------+
| productid    | int           | NO   | PRI | NULL              | auto_increment    |
| productname  | varchar(30)   | NO   |     | NULL              |                   |
| categoryid   | int           | YES  | MUL | NULL              |                   |
| productprice | decimal(25,5) | YES  |     | NULL              |                   |
| sellingprice | decimal(8,2)  | YES  |     | NULL              |                   |
| createdAt    | timestamp     | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED |
+--------------+---------------+------+-----+-------------------+-------------------+
6 rows in set (0.01 sec)



-----------------------------------------MODIFYING DATA IN MYSQL----------------------------------


---Insert Query(Inserting a Record to table)------
Ques:- how do we insert data in the table?
:- we have an "INSERT" statement to add new records to the table.

SYNTAX:-
INSERT INTO <tablename>
(col1,col2,col3)
VALUES
(val1,val2,val3);

Note:- here,column names are optional - if we don't specify the column names then we have to provide values for all the columns in the table.

mysql> INSERT INTO productcategory
    -> VALUES
    -> (DEFAULT,'category1','cate1 title',DEFAULT,DEFAULT);
Query OK, 1 row affected (0.01 sec)

mysql>
mysql> SELECT * FROM productcategory;
+----+--------------+---------------+------------------+---------------------+
| id | categoryname | categorytitle | descriptio       | createdAt           |
+----+--------------+---------------+------------------+---------------------+
|  2 | Laptops      | Gadgets       | Some desription2 | 2022-08-22 03:33:22 |
| 10 | Mobiles      | Gadgets       | Some desription  | 2022-08-22 03:27:08 |
| 11 | category1    | cate1 title   | NULL             | 2022-08-23 01:37:43 |
+----+--------------+---------------+------------------+---------------------+
3 rows in set (0.00 sec)



-----------INSERT IGNORE INTO & ON DUPLICATE KEY-----------
INSERT IGNORE INTO and INSERT ON DUPLICATE KEY UPDATE are MySQL's extension over the standard INSERT statement.

Suppose, if we try to enter the value in the primary key with the value that already exists in the table,MySQL will throw us an error.
To overcome such a situation we have INSERT IGNORE INTO CLAUSE .


mysql> SELECT * FROM productcategory;
+----+--------------+---------------+------------------+---------------------+
| id | categoryname | categorytitle | descriptio       | createdAt           |
+----+--------------+---------------+------------------+---------------------+
|  2 | Laptops      | Gadgets       | Some desription2 | 2022-08-22 03:33:22 |
| 10 | Mobiles      | Gadgets       | Some desription  | 2022-08-22 03:27:08 |
| 11 | category1    | cate1 title   | NULL             | 2022-08-23 01:37:43 |
| 12 | category1    | cate1 title   | NULL             | 2022-08-23 02:48:59 |
| 13 | category1    | cate1 title   | NULL             | 2022-08-23 02:49:04 |
| 14 | category1    | cate1 title   | NULL             | 2022-08-23 02:49:05 |
| 15 | category1    | cate1 title   | NULL             | 2022-08-23 02:49:11 |
| 16 | category1    | cate1 title   | NULL             | 2022-08-23 02:49:23 |
| 18 | NEW category | IGNORE TEST   | NULL             | 2022-08-23 02:53:23 |
+----+--------------+---------------+------------------+---------------------+
9 rows in set (0.00 sec)

mysql> INSERT INTO productcategory (id,categoryname,categorytitle)
    -> VALUES
    -> (18,'NEW category','IGNORE TEST');
ERROR 1062 (23000): Duplicate entry '18' for key 'productcategory.PRIMARY'

:- what happens if we use INSERT  IGNORE INTO:-

mysql> INSERT IGNORE INTO productcategory (id,categoryname,categorytitle)
    -> VALUES
    -> (18,'NEW category','IGNORE TEST');
Query OK, 0 rows affected, 1 warning (0.00 sec)



---------ON DUPLICATE KEY-------
:- It updates the value if any primary key constraints fail i.e., if any duplicate key is found it will update the column provided in ON DUPLICATE KEY UPDATE clause.

mysql> INSERT INTO productcategory (id,categoryname,categorytitle)
    -> VALUES
    -> (18,'NEW category','IGNORE TEST')
    -> ON DUPLICATE KEY UPDATE categoryname='Updated category';
Query OK, 2 rows affected (0.01 sec)



---------INSERTING HIERARCHICAL DATA-------------









----------Update Single Row--------------
syntax:- 
UPDATE <table_name>
SET
   col_name1=val1,
   col_name2=val2,
WHERE <condition>

Note:- if we don't specify WHERE clause MYSQL will update all the records in the table.

mysql> UPDATE products
    -> SET productprice=10,
    ->     sellingprice=20
    -> WHERE productid=5;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

------------updating multiple records-------------
mysql> UPDATE products
    -> SET categoryid=50
    -> WHERE categoryid=NULL;
Query OK, 0 rows affected (0.00 sec)
Rows matched: 0  Changed: 0  Warnings: 0




------------------------------------SORTING DATA------------------------------------------














